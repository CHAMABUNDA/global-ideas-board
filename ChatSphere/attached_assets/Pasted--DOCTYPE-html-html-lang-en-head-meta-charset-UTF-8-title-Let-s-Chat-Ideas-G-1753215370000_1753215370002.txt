<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Let's Chat Ideas ‚Äì Global Board üåç</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/gun/gun.js"></script>
  <style>
    body {
      background: linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet);
      background-size: 400% 400%;
      animation: rainbow 10s ease infinite;
      margin-bottom: 100px;
      transition: background 0.5s, color 0.5s;
    }
    @keyframes rainbow {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }
    .idea-card {
      background-color: rgba(255, 255, 255, 0.85);
      border-left: 10px solid #ccc;
      margin-bottom: 1rem;
      padding: 1rem;
      border-radius: 6px;
      transition: background-color 0.5s, color 0.5s;
    }
    .thumbnail {
      max-width: 100px;
      max-height: 100px;
      margin-top: 10px;
      border-radius: 4px;
      display: block;
    }
    .sdg-icon {
      height: 30px;
      width: auto;
      margin-right: 8px;
      vertical-align: middle;
    }
    .theme-toggle {
      position: fixed;
      top: 10px;
      right: 10px;
      z-index: 1000;
    }
    body.dark-mode {
      background: #121212;
      color: white;
    }
    body.dark-mode .idea-card {
      background-color: #1e1e1e;
      border-color: #333;
      color: white;
    }
    body.dark-mode .form-control,
    body.dark-mode .form-select {
      background-color: #2a2a2a;
      color: white;
      border-color: #444;
    }
    .carousel {
      margin: 20px 0;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 0 15px rgba(0,0,0,0.3);
    }
    .progress-bar-wrapper {
      margin-top: 10px;
    }
    .badge-stage {
      margin-right: 6px;
    }
    button {
      margin: 2px 4px 6px 0;
    }
    /* Scrollable idea list */
    #ideaList {
      max-height: 450px;
      overflow-y: auto;
      padding-right: 10px;
    }
    ul {
      list-style-type: none;
      padding-left: 0;
    }
  </style>
</head>
<body>
  <div class="theme-toggle">
    <button class="btn btn-sm btn-outline-light" id="toggleTheme" title="Toggle Dark Mode">üåÉ Toggle Theme</button>
  </div>
  <div class="container py-5">
    <h1 class="text-center mb-4">Let‚Äôs Chat Ideas ‚Äì Global Board üåç</h1>

    <!-- Idea submission card -->
    <div class="card mb-4 p-3">
      <h4>Submit Your Idea üí°</h4>
      <input class="form-control mb-2" id="ideaTitle" placeholder="Idea Title" aria-label="Idea Title" />
      <input class="form-control mb-2" id="ideaName" placeholder="Your Name" aria-label="Your Name" />
      <textarea class="form-control mb-2" id="ideaDesc" rows="3" placeholder="Describe your idea..." aria-label="Idea Description"></textarea>
      <select class="form-select mb-2" id="ideaCategory" aria-label="Select SDG Category">
        <option disabled selected>Select SDG Category</option>
      </select>
      <input type="file" class="form-control mb-2" id="ideaImage" accept="image/*" aria-label="Upload Idea Image" />
      <select class="form-select mb-3" id="ideaStage" aria-label="Select Progress Stage">
        <option value="0">Concept</option>
        <option value="1">Prototype</option>
        <option value="2">Pilot</option>
        <option value="3">Impact</option>
      </select>
      <button class="btn btn-success" id="submitIdeaBtn">Post Idea</button>
    </div>

    <!-- SDG Icons carousel -->
    <div id="sdgCarousel" class="carousel slide" data-bs-ride="carousel" aria-label="SDG Filter Carousel">
      <div class="carousel-inner" id="carouselItems"></div>
      <button class="carousel-control-prev" type="button" data-bs-target="#sdgCarousel" data-bs-slide="prev" aria-label="Previous SDG">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
      </button>
      <button class="carousel-control-next" type="button" data-bs-target="#sdgCarousel" data-bs-slide="next" aria-label="Next SDG">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
      </button>
    </div>

    <!-- Heatmap bar chart -->
    <canvas id="heatmap" height="120" aria-label="Heatmap of Ideas by SDG"></canvas>

    <!-- Search engine choice -->
    <div class="mb-3">
      <label class="form-label fw-bold" for="searchEngine">Choose Search Engine:</label>
      <select class="form-select w-auto d-inline-block" id="searchEngine" aria-label="Search Engine Choice">
        <option value="google" selected>Google</option>
        <option value="bing">Bing</option>
        <option value="duckduckgo">DuckDuckGo</option>
      </select>
    </div>

    <!-- Ideas list -->
    <div id="ideaList" class="mt-4" aria-live="polite" aria-atomic="true"></div>
  </div>

  <script>
    // SDG Names and Icons URLs
    const sdgNames = ['', 
      'No Poverty', 'Zero Hunger', 'Good Health and Well-being', 'Quality Education', 'Gender Equality', 
      'Clean Water and Sanitation', 'Affordable and Clean Energy', 'Decent Work and Economic Growth', 
      'Industry, Innovation and Infrastructure', 'Reduced Inequality', 'Sustainable Cities and Communities', 
      'Responsible Consumption and Production', 'Climate Action', 'Life Below Water', 'Life on Land', 
      'Peace, Justice and Strong Institutions', 'Partnerships for the Goals'];

    const sdgIcons = {};
    for (let i = 1; i <= 17; i++) {
      sdgIcons[i] = `https://sdgs.un.org/sites/default/files/goals/E_SDG_Icons-${String(i).padStart(2,'0')}.jpg`;
    }

    // Gun.js DB setup
    const gun = Gun();
    const ideasDB = gun.get('global-sdg-ideas');

    let ideas = []; // Local ideas array
    let currentFilterSDG = null; // Currently filtered SDG category

    // Initialize SDG carousel and category select
    function initCarousel() {
      const carouselContainer = document.getElementById('carouselItems');
      carouselContainer.innerHTML = '';
      sdgNames.slice(1).forEach((name, i) => {
        const div = document.createElement('div');
        div.className = 'carousel-item' + (i === 0 ? ' active' : '');
        div.innerHTML = `
          <img src="${sdgIcons[i+1]}" alt="${name}" class="d-block w-100" style="cursor:pointer;" title="Filter by ${name}" onclick="filterBySDG(${i+1})" />
          <div class="carousel-caption d-none d-md-block bg-dark bg-opacity-50 rounded p-2">
            <h5>${i+1} - ${name}</h5>
          </div>
        `;
        carouselContainer.appendChild(div);
      });

      // Populate select dropdown with SDGs
      const select = document.getElementById('ideaCategory');
      select.innerHTML = '<option disabled selected>Select SDG Category</option>';
      sdgNames.slice(1).forEach((name, i) => {
        const option = document.createElement('option');
        option.value = i+1;
        option.textContent = `${i+1} - ${name}`;
        select.appendChild(option);
      });
    }

    // Render progress badges for stage
    function renderProgressBar(stage) {
      const stages = ['Concept', 'Prototype', 'Pilot', 'Impact'];
      return stages.map((stageName, i) => {
        return `<span class="badge badge-stage ${i <= stage ? 'bg-success' : 'bg-secondary'}">${stageName}</span>`;
      }).join(' ‚ûú ');
    }

    // Auto-suggest tags from description
    function suggestTags(desc) {
      if (!desc) return [];
      const keywords = ['education','water','health','energy','equality','climate','hunger','justice','poverty','environment','innovation'];
      return keywords.filter(k => desc.toLowerCase().includes(k));
    }

    // Render all ideas on page with optional SDG filter
    function renderIdeas(filterSDG = null) {
      currentFilterSDG = filterSDG;
      const container = document.getElementById('ideaList');
      container.innerHTML = '';

      const filteredIdeas = filterSDG ? ideas.filter(idea => +idea.category === +filterSDG) : ideas;

      if(filteredIdeas.length === 0) {
        container.innerHTML = '<p class="text-center fst-italic">No ideas to show.</p>';
        updateHeatmap();
        return;
      }

      filteredIdeas.forEach((idea, index) => {
        const card = document.createElement('div');
        card.className = 'idea-card';
        card.id = idea.id;

        const tags = idea.tags && idea.tags.length ? idea.tags.join(', ') : '(no tags)';
        const commentsHtml = (idea.comments || []).map((c, ci) => 
          `<li>
            ${c} 
            <button class="btn btn-sm btn-link text-danger p-0 ms-2" onclick="deleteComment(${index}, ${ci})" title="Delete comment">üóëÔ∏è</button>
            <button class="btn btn-sm btn-link text-warning p-0" onclick="editComment(${index}, ${ci})" title="Edit comment">‚úèÔ∏è</button>
          </li>`).join('');

        card.innerHTML = `
          <h5>
            <img src="${sdgIcons[idea.category]}" class="sdg-icon" alt="SDG Icon" title="${sdgNames[idea.category]}">
            ${idea.title} <small class="text-muted">by ${idea.name}</small>
          </h5>
          <p><strong>Category:</strong> SDG ${idea.category} - ${sdgNames[idea.category]}</p>
          <p>${idea.description || ''}</p>
          ${idea.imageData ? `<img src="${idea.imageData}" alt="Idea Image" class="thumbnail">` : ''}
          <div class="mb-2">${renderProgressBar(idea.stage || 0)}</div>

          <div class="d-flex flex-wrap gap-2 mb-2">
            <button class="btn btn-sm btn-info" onclick="searchOnline(${index})" title="Search more online">üîç Search Online</button>
            <button class="btn btn-sm btn-success" onclick="searchFunding(${index})" title="Search possible funding">üí∞ Funding</button>
            <button class="btn btn-sm btn-primary" onclick="searchSimilar(${index})" title="Search similar ideas">üîÅ Similar</button>
            <button class="btn btn-sm btn-secondary" onclick="searchBrainstorm(${index})" title="Brainstorm">üß† Brainstorm</button>
            <button class="btn btn-sm btn-warning" onclick="editIdea(${index})" title="Edit idea">‚úèÔ∏è Edit</button>
            <button class="btn btn-sm btn-danger" onclick="deleteIdea(${index})" title="Delete idea">üóëÔ∏è Delete</button>
          </div>

          <div><strong>Tags:</strong> ${tags}</div>

          <input class="form-control mt-2 mb-1" placeholder="Add comment..." id="comment-${index}" aria-label="Add comment for idea ${index}">
          <button class="btn btn-sm btn-outline-primary mb-2" onclick="addComment(${index})">Add Comment</button>

          <ul id="comments-${index}">${commentsHtml}</ul>
        `;

        container.appendChild(card);
      });

      updateHeatmap();
    }

    // Heatmap Chart
    let heatmapChart = null;
    function updateHeatmap() {
      const ctx = document.getElementById('heatmap').getContext('2d');
      const counts = Array(17).fill(0);
      ideas.forEach(idea => {
        const c = +idea.category;
        if (c >= 1 && c <= 17) counts[c-1]++;
      });

      if (heatmapChart) {
        heatmapChart.data.datasets[0].data = counts;
        heatmapChart.update();
      } else {
        heatmapChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: sdgNames.slice(1),
            datasets: [{
              label: 'Number of Ideas',
              data: counts,
              backgroundColor: 'rgba(54, 162, 235, 0.6)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            scales: {
              y: {
                beginAtZero: true,
                ticks: { precision: 0 }
              }
            }
          }
        });
      }
    }

    // Reset form after submit or cancel edit
    function resetForm() {
      document.getElementById('ideaTitle').value = '';
      document.getElementById('ideaName').value = '';
      document.getElementById('ideaDesc').value = '';
      document.getElementById('ideaCategory').selectedIndex = 0;
      document.getElementById('ideaStage').selectedIndex = 0;
      document.getElementById('ideaImage').value = '';
      const btn = document.getElementById('submitIdeaBtn');
      btn.textContent = 'Post Idea';
      delete btn.dataset.editingIndex;
    }

    // Save ideas array into Gun DB
    function saveIdeas() {
      ideasDB.put({ ideas }, ack => {
        if (ack.err) console.error('Gun save error:', ack.err);
      });
    }

    // Load ideas from Gun snapshot data
    function loadIdeasFromGun(data) {
      if (!data) return;
      if (Array.isArray(data.ideas)) {
        ideas = data.ideas;
        renderIdeas(currentFilterSDG);
      }
    }

    // Gun listener for realtime updates
    ideasDB.on(data => {
      if (!data) return;
      const incomingIdeas = data.ideas || [];
      if (!Array.isArray(incomingIdeas)) return;
      // Simple JSON compare to avoid unnecessary rerenders
      if (JSON.stringify(incomingIdeas) !== JSON.stringify(ideas)) {
        ideas = incomingIdeas;
        renderIdeas(currentFilterSDG);
      }
    });

    // Submit or update idea
    async function submitIdea() {
      const title = document.getElementById('ideaTitle').value.trim();
      const name = document.getElementById('ideaName').value.trim();
      const description = document.getElementById('ideaDesc').value.trim();
      const category = document.getElementById('ideaCategory').value;
      const stage = +document.getElementById('ideaStage').value;
      const imageInput = document.getElementById('ideaImage');
      const submitBtn = document.getElementById('submitIdeaBtn');

      if (!title || !name || !description || !category) {
        alert('Please fill in all required fields.');
        return;
      }

      const editingIndex = submitBtn.dataset.editingIndex;
      const isEditing = editingIndex !== undefined;

      // Convert image file to base64
      function readImage(file) {
        return new Promise((resolve, reject) => {
          if (!file) resolve(null);
          const reader = new FileReader();
          reader.onload = e => resolve(e.target.result);
          reader.onerror = () => reject(new Error('Failed to read image file.'));
          reader.readAsDataURL(file);
        });
      }

      const imageFile = imageInput.files[0];
      let imageData = null;
      try {
        imageData = await readImage(imageFile);
      } catch(e) {
        alert('Error reading image file.');
        return;
      }

      const ideaObj = {
        id: isEditing ? ideas[editingIndex].id : generateID(),
        title,
        name,
        description,
        category,
        stage,
        imageData: imageData || (isEditing ? ideas[editingIndex].imageData : null),
        tags: suggestTags(description),
        comments: isEditing ? ideas[editingIndex].comments || [] : []
      };

      if (isEditing) {
        ideas[editingIndex] = ideaObj;
      } else {
        ideas.push(ideaObj);
      }

      saveIdeas();
      renderIdeas(currentFilterSDG);
      resetForm();
    }

    // Generate a simple unique ID
    function generateID() {
      return 'id-' + Date.now() + '-' + Math.floor(Math.random() * 100000);
    }

    // Edit idea: fill form fields and change submit button
    function editIdea(index) {
      const idea = ideas[index];
      document.getElementById('ideaTitle').value = idea.title;
      document.getElementById('ideaName').value = idea.name;
      document.getElementById('ideaDesc').value = idea.description;
      document.getElementById('ideaCategory').value = idea.category;
      document.getElementById('ideaStage').value = idea.stage;
      // Image input can't be set programmatically for security reasons; user must re-upload to change
      const btn = document.getElementById('submitIdeaBtn');
      btn.textContent = 'Update Idea';
      btn.dataset.editingIndex = index;
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }

    // Delete idea
    function deleteIdea(index) {
      if (confirm('Are you sure you want to delete this idea?')) {
        ideas.splice(index, 1);
        saveIdeas();
        renderIdeas(currentFilterSDG);
      }
    }

    // Filter ideas by SDG from carousel click
    function filterBySDG(sdgNumber) {
      if(currentFilterSDG === sdgNumber) {
        currentFilterSDG = null; // toggle off filter
        renderIdeas(null);
      } else {
        currentFilterSDG = sdgNumber;
        renderIdeas(sdgNumber);
      }
    }

    // Add comment to idea
    function addComment(index) {
      const input = document.getElementById(`comment-${index}`);
      const comment = input.value.trim();
      if (!comment) return alert('Please enter a comment.');

      if (!ideas[index].comments) ideas[index].comments = [];
      ideas[index].comments.push(comment);
      saveIdeas();
      renderIdeas(currentFilterSDG);
    }

    // Delete comment
    function deleteComment(ideaIndex, commentIndex) {
      if (confirm('Delete this comment?')) {
        ideas[ideaIndex].comments.splice(commentIndex, 1);
        saveIdeas();
        renderIdeas(currentFilterSDG);
      }
    }

    // Edit comment - simple prompt for editing
    function editComment(ideaIndex, commentIndex) {
      const oldComment = ideas[ideaIndex].comments[commentIndex];
      const newComment = prompt('Edit comment:', oldComment);
      if (newComment !== null) {
        ideas[ideaIndex].comments[commentIndex] = newComment.trim();
        saveIdeas();
        renderIdeas(currentFilterSDG);
      }
    }

    // Search online - opens new tab with query
    function searchOnline(index) {
      const idea = ideas[index];
      if (!idea) return;
      const query = encodeURIComponent(`${idea.title} ${idea.description}`);
      const engine = document.getElementById('searchEngine').value;
      let url = '';
      switch(engine) {
        case 'google':
          url = `https://www.google.com/search?q=${query}`;
          break;
        case 'bing':
          url = `https://www.bing.com/search?q=${query}`;
          break;
        case 'duckduckgo':
          url = `https://duckduckgo.com/?q=${query}`;
          break;
      }
      window.open(url, '_blank');
    }

    // Search funding
    function searchFunding(index) {
      const idea = ideas[index];
      if (!idea) return;
      const query = encodeURIComponent(`${idea.title} ${idea.description} funding grants`);
      const engine = document.getElementById('searchEngine').value;
      let url = '';
      switch(engine) {
        case 'google':
          url = `https://www.google.com/search?q=${query}`;
          break;
        case 'bing':
          url = `https://www.bing.com/search?q=${query}`;
          break;
        case 'duckduckgo':
          url = `https://duckduckgo.com/?q=${query}`;
          break;
      }
      window.open(url, '_blank');
    }

    // Search similar ideas
    function searchSimilar(index) {
      const idea = ideas[index];
      if (!idea) return;
      const query = encodeURIComponent(`${idea.title} ${idea.description} similar ideas`);
      const engine = document.getElementById('searchEngine').value;
      let url = '';
      switch(engine) {
        case 'google':
          url = `https://www.google.com/search?q=${query}`;
          break;
        case 'bing':
          url = `https://www.bing.com/search?q=${query}`;
          break;
        case 'duckduckgo':
          url = `https://duckduckgo.com/?q=${query}`;
          break;
      }
      window.open(url, '_blank');
    }

    // Brainstorm search
    function searchBrainstorm(index) {
      const idea = ideas[index];
      if (!idea) return;
      const query = encodeURIComponent(`${idea.title} ${idea.description} brainstorm ideas`);
      const engine = document.getElementById('searchEngine').value;
      let url = '';
      switch(engine) {
        case 'google':
          url = `https://www.google.com/search?q=${query}`;
          break;
        case 'bing':
          url = `https://www.bing.com/search?q=${query}`;
          break;
        case 'duckduckgo':
          url = `https://duckduckgo.com/?q=${query}`;
          break;
      }
      window.open(url, '_blank');
    }

    // Dark mode toggle
    function toggleTheme() {
      document.body.classList.toggle('dark-mode');
      const btn = document.getElementById('toggleTheme');
      btn.textContent = document.body.classList.contains('dark-mode') ? '‚òÄÔ∏è Light Mode' : 'üåÉ Dark Mode';
    }

    // Generate unique ID
    function generateID() {
      return 'id-' + Date.now() + '-' + Math.floor(Math.random() * 100000);
    }

    // Event listeners
    document.getElementById('submitIdeaBtn').addEventListener('click', submitIdea);
    document.getElementById('toggleTheme').addEventListener('click', toggleTheme);

    // Initialize all on load
    window.addEventListener('load', () => {
      initCarousel();
      renderIdeas();
      // Set initial theme button text
      document.getElementById('toggleTheme').textContent = 'üåÉ Toggle Theme';
    });
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
